import { createSlice } from '@reduxjs/toolkit';
import { postGet, postDelete, postLikeGet } from './post.actions';

// Initial state for Redux store:
const initialState = {
  post: {}
};

// Create Redux state slice
const postSlice = createSlice({
  name: 'post',
  initialState, // Define initial state
  // reducers: {
  //   // Define reducers
  //   addPost: (state, action) => {
  //     state.posts = [...state.posts, action.payload];
  //   },
  //   removePost: (state, action) => {
  //     state.posts = state.posts.filter((b) => b.id !== action.payload.id);
  //   }
  // },
  extraReducers: {
    // Post create actions
    // [postCreate.pending]: (state) => {
    //   state.loading = true;
    //   state.error = null;
    // },
    // [postCreate.fulfilled]: (state, { payload }) => {
    //   state.loading = false;
    //   state.success = true; // registration successful
    //   state.posts.push(payload);
    // },
    // [postCreate.rejected]: (state, { payload }) => {
    //   state.loading = false;
    //   state.error = payload;
    // },

    // Post get actions
    [postGet.pending]: (state) => {
      state.loading = true;
      state.error = null;
      // state = {loading: true};
    },
    [postGet.fulfilled]: (state, { payload }) => {
      state.loading = false;
      state.success = true;
      state.posts = payload;
    },
    [postGet.rejected]: (state, { payload }) => {
      state.loading = false;
      state.error = payload;
    },

    // Post delete
    [postDelete.pending]: (state) => {
      state.loading = true;
      state.error = null;
    },
    [postDelete.fulfilled]: (state, { payload, meta }) => {
      state.loading = false;
      state.success = true;
      state.posts = state.posts.filter((b) => b.id !== meta.arg.id);
    },
    [postDelete.rejected]: (state, { payload }) => {
      state.loading = false;
      state.error = payload;
    },
    // Likes Actions
    [postLikeGet.pending]: (state) => {
      state.loading = true;
      state.error = null;
    },
    [postLikeGet.fulfilled]: (state, { payload }) => {
      state.loading = false;
      state.success = true;
      state.posts.push(payload);
    },
    [postLikeGet.rejected]: (state, { payload }) => {
      state.loading = false;
      state.error = payload;
    }
  }
});

// Export actions generated by "createSlice()":
// export const { addPost, removePost } = postSlice.actions;

// Export reducer generated by "createSlice()":
export const postReducer = postSlice.reducer;
