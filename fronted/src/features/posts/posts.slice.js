import { createSlice } from '@reduxjs/toolkit';
import { postCreate, postAll, postDelete} from './posts.actions';

// Initial state for Redux store:
const initialState = {
  posts: {}
};

// Create Redux state slice
const postSlice = createSlice({
  name: 'posts',
  initialState, // Define initial state
  reducers: {
    // Define reducers
    addPost: (state, action) => {
      // Reducer for adding new book to collection
      // Create new state by taking existing posts
      // and combining them with newly added book:
      state.posts = [...state.posts, action.payload];
    },
    removePost: (state, action) => {
      // Reducer for removing book from collection
      // Filter out a book that matches provided "id":
      state.posts = state.posts.filter((b) => b.id !== action.payload.id);
    }
  },
  extraReducers: {
    // Post create actions
    [postCreate.pending]: (state) => {
      state.loading = true;
      state.error = null;
    },
    [postCreate.fulfilled]: (state, { payload }) => {
      state.loading = false;
      state.success = true; // registration successful
      state.posts.push(payload);
    },
    [postCreate.rejected]: (state, { payload }) => {
      state.loading = false;
      state.error = payload;
    },

    // Post get actions
    [postAll.pending]: (state) => {
      state.loading = true;
      state.error = null;
      // state = {loading: true};
    },
    [postAll.fulfilled]: (state, { payload }) => {
      state.loading = false;
      state.success = true;
      state.posts = payload;
    },
    [postAll.rejected]: (state, { payload }) => {
      state.loading = false;
      state.error = payload;
    },

    // Post get actions
    [postDelete.pending]: (state) => {
      state.loading = true;
      state.error = null;
    },
    [postDelete.fulfilled]: (state, { payload, meta }) => {
      state.loading = false;
      state.success = true;
      state.posts = state.posts.filter((b) => b.id !== meta.arg.id);
    },
    [postDelete.rejected]: (state, { payload }) => {
      state.loading = false;
      state.error = payload;
    }
  }
});

// Export actions generated by "createSlice()":
export const { addPost, removePost } = postSlice.actions;

// Export reducer generated by "createSlice()":
export const postsReducer = postSlice.reducer;
